{"version":3,"sources":["components/AddList.jsx","redux/actions/index.js","components/Card.jsx","components/List.jsx","App.jsx","reportWebVitals.js","redux/reducers/listReducer.jsx","redux/reducers/cardReducer.jsx","redux/reducers/index.js","index.js"],"names":["List","useState","isEdit","setEdit","input","setInput","dispatch","useDispatch","showview","className","onClick","e","editview","onSubmit","preventDefault","type","title","name","value","onChange","target","props","draggableId","id","index","provided","draggableProps","dragHandleProps","ref","innerRef","card","useSelector","state","cardIds","cards","cardReducer","count","i","l","push","droppableId","droppableProps","placeholder","listId","newcardId","nanoid","App","list","listReducer","map","onDragEnd","result","destination","source","console","log","droppabledId","SWITCHCARDINLIST","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","action","newlist","newState","newcardIds","allReducers","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27bae906.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"../css/List.css\";\nimport { useDispatch } from \"react-redux\";\nimport { ADDLIST } from \"../redux/actions\";\nexport default function List() {\n  const [isEdit, setEdit] = useState(false);\n  const [input, setInput] = useState(\"\");\n  const dispatch = useDispatch();\n  function handleChange(e) {\n    setInput(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (input !== \"\") {\n      dispatch(ADDLIST(input));\n    }\n  }\n\n  const showview = (\n    <div className=\"list\">\n      <div className=\"action\">\n        <button\n          onClick={(e) => {\n            setEdit(true);\n          }}\n        >\n          + Add a List\n        </button>\n      </div>\n    </div>\n  );\n\n  const editview = (\n    <div className=\"list\">\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"text\" value={input} onChange={handleChange} />\n        <button>Add List</button>\n        <button\n          onClick={(e) => {\n            setEdit(false);\n          }}\n        >\n          X\n        </button>\n      </form>\n    </div>\n  );\n\n  return <div className=\"list-wrapper\">{isEdit ? editview : showview}</div>;\n}\n","const ADDLIST = (title) => {\n  return {\n    type: \"ADDLIST\",\n    title: title,\n  };\n};\n\n//card\nconst ADDCARD = (listId, title, newcardId) => {\n  return {\n    type: \"ADDCARD\",\n    title: title,\n    listId: listId,\n    newcardId: newcardId,\n  };\n};\n\nconst DeleteTask = (id) => {\n  return {\n    type: \"DeleteTask\",\n    id: id,\n  };\n};\n\nconst ToggleTask = (id) => {\n  return { type: \"ToggleTask\", id: id };\n};\nconst EditTask = (id, name) => {\n  return {\n    type: \"EditTask\",\n    name: name,\n    id: id,\n  };\n};\n\nconst SWITCHCARDINLIST = (listId, destination, source) => {\n  console.log(listId);\n  return {\n    type: \"SWITCHCARDINLIST\",\n    listId: listId,\n    destination: destination,\n    source: source,\n  };\n};\n\nexport { SWITCHCARDINLIST, ADDLIST, ADDCARD, DeleteTask, ToggleTask, EditTask };\n","import React, { useState } from \"react\";\nimport \"../css/Card.css\";\nimport { Draggable } from \"react-beautiful-dnd\";\nexport default function List(props) {\n  return (\n    <Draggable draggableId={props.id} index={props.index}>\n      {(provided) => (\n        <div\n          className=\"card\"\n          id={props.id}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n        >\n          {props.title}\n        </div>\n      )}\n    </Draggable>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"../css/List.css\";\nimport Card from \"../components/Card\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ADDCARD } from \"../redux/actions\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport { nanoid } from \"nanoid\";\nexport default function List(props) {\n  const [isEdit, setEdit] = useState(false);\n  const [input, setInput] = useState(\"\");\n  const dispatch = useDispatch();\n\n  function addCard() {\n    if (input !== \"\") {\n      dispatch(ADDCARD(props.id, input, \"card-\" + nanoid()));\n    }\n\n    setInput(\"\");\n  }\n  function handleChange(e) {\n    setInput(e.target.value);\n  }\n  let card = [];\n\n  useSelector((state) => {\n    let cardIds = props.cardIds;\n    let cards = state.cardReducer;\n    let count = 0;\n    for (let i in cardIds) {\n      for (let l in cards) {\n        if (cards[l].id === cardIds[i]) {\n          card.push(\n            <Card\n              title={cards[l].title}\n              id={cards[l].id}\n              key={cards[l].id}\n              index={count}\n            />\n          );\n          count++;\n        }\n      }\n    }\n  });\n\n  const showview = (\n    <div className=\"list\" id={props.id}>\n      <div className=\"title\">{props.title}</div>\n      <Droppable droppableId={props.id}>\n        {(provided) => (\n          <div\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n            className=\"cardWrapper\"\n          >\n            {card}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n      <div className=\"action\">\n        <button\n          onClick={(e) => {\n            setEdit(true);\n          }}\n        >\n          Add a Card\n        </button>\n      </div>\n    </div>\n  );\n\n  const editview = (\n    <div className=\"list\">\n      <div className=\"title\">{props.title}</div>\n      <Droppable droppableId={props.id}>\n        {(provided) => (\n          <div\n            ref={provided.innerRef}\n            {...provided.droppableProps}\n            className=\"cardWrapper\"\n          >\n            {card}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n      <input type=\"text\" value={input} onChange={handleChange} />\n      <button onClick={addCard}>Add Card</button>\n      <button\n        onClick={(e) => {\n          setEdit(false);\n        }}\n      >\n        X\n      </button>\n    </div>\n  );\n\n  return <div className=\"list-wrapper\">{isEdit ? editview : showview}</div>;\n}\n","import \"./css/App.css\";\nimport AddList from \"./components/AddList\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport List from \"./components/List\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { SWITCHCARDINLIST } from \"./redux/actions\";\nfunction App() {\n  const dispatch = useDispatch();\n  const list = useSelector((state) => {\n    return state.listReducer.map((list) => {\n      return (\n        <List\n          id={list.id}\n          title={list.title}\n          key={list.id}\n          cardIds={list.cardIds}\n        />\n      );\n    });\n  });\n  function onDragEnd(result) {\n    const { destination, source, draggableId } = result;\n    console.log(result);\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n    if (destination.droppableId === source.droppableId) {\n      console.log(destination.index, source.index);\n      console.log(source.droppabledId);\n      dispatch(\n        SWITCHCARDINLIST(source.droppableId, destination.index, source.index)\n      );\n      // useSelector((state) => {\n      //   let sourceListId = source.droppabledId;\n      //   let list = state.listReducer.sourceListId;\n      //   console.log(state.list);\n      // });\n    }\n  }\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>My Trello</h1>\n        </header>\n        <div className=\"main-board\">\n          {list}\n          <AddList />\n        </div>\n      </div>\n    </DragDropContext>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","//reducer\nimport { nanoid } from \"nanoid\";\nconst List = [\n  { id: \"list-0\", title: \"React\", cardIds: [\"card-0\", \"card-1\", \"card-2\"] },\n  { id: \"list-1\", title: \"Redux\", cardIds: [\"card-3\"] },\n];\n\nconst listReducer = (state = List, action) => {\n  switch (action.type) {\n    // case \"DeleteTask\":\n    //   let remaintasks = state.tasks.filter((task) => task.id != action.id);\n\n    //   return { tasks: remaintasks };\n    case \"ADDLIST\":\n      console.log(state);\n\n      return [\n        ...state,\n        {\n          id: \"list-\" + nanoid(),\n          title: action.title,\n          cardIds: [],\n        },\n      ];\n    case \"ADDCARD\":\n      let newlist = state.map((list) => {\n        if (list.id === action.listId) {\n          return { ...list, cardIds: [...list.cardIds, action.newcardId] };\n        }\n        return list;\n      });\n      console.log(newlist);\n      return newlist;\n\n    case \"SWITCHCARDINLIST\": //listId, destination, source\n      let newState = state.map((list) => {\n        console.log(list.id, action.listId);\n        if (list.id === action.listId) {\n          let newcardIds = list.cardIds;\n          [newcardIds[action.destination], newcardIds[action.source]] = [\n            newcardIds[action.source],\n            newcardIds[action.destination],\n          ];\n          return { ...list, cardIds: newcardIds };\n        }\n        return list;\n      });\n      return newState;\n    // case \"ToggleTask\":\n    //   let updatetasks = state.tasks.map((task) => {\n    //     console.log(action.id, task.id);\n    //     if (action.id === task.id) {\n    //       return { ...task, completed: !task.completed };\n    //     }\n    //     return task;\n    //   });\n\n    //   return { tasks: updatetasks };\n\n    // case \"EditTask\":\n    //   let editTasks = state.tasks.map((task) => {\n    //     if (action.id === task.id) {\n    //       return { ...task, name: action.name };\n    //     }\n    //     return task;\n    //   });\n\n    //   return { tasks: editTasks };\n\n    default:\n      return state;\n  }\n};\n\nexport default listReducer;\n","//reducer\nimport { nanoid } from \"nanoid\";\nconst card = [\n  { id: \"card-0\", title: \"Go crazy\" },\n  { id: \"card-1\", title: \"youtube video\" },\n  { id: \"card-2\", title: \"there's no hope in life\" },\n  { id: \"card-3\", title: \"triple for loop is awesome\" },\n];\n\nconst cardReducer = (state = card, action) => {\n  switch (action.type) {\n    // case \"DeleteTask\":\n    //   let remaintasks = state.tasks.filter((task) => task.id != action.id);\n\n    //   return { tasks: remaintasks };\n    case \"ADDCARD\":\n      console.log(state);\n      console.log(action.newcardId);\n\n      return [\n        ...state,\n        {\n          id: action.newcardId,\n          title: action.title,\n        },\n      ];\n\n    // case \"ToggleTask\":\n    //   let updatetasks = state.tasks.map((task) => {\n    //     console.log(action.id, task.id);\n    //     if (action.id === task.id) {\n    //       return { ...task, completed: !task.completed };\n    //     }\n    //     return task;\n    //   });\n\n    //   return { tasks: updatetasks };\n\n    // case \"EditTask\":\n    //   let editTasks = state.tasks.map((task) => {\n    //     if (action.id === task.id) {\n    //       return { ...task, name: action.name };\n    //     }\n    //     return task;\n    //   });\n\n    //   return { tasks: editTasks };\n\n    default:\n      return state;\n  }\n};\n\nexport default cardReducer;\n","import listReducer from \"./listReducer\";\nimport cardReducer from \"./cardReducer\";\nimport { combineReducers } from \"redux\";\n\nconst allReducers = combineReducers({\n  listReducer: listReducer,\n  cardReducer: cardReducer,\n});\n\nexport default allReducers;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { createStore } from \"redux\";\nimport allReducers from \"./redux/reducers\";\nimport { Provider } from \"react-redux\";\nconst store = createStore(allReducers);\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}